/// ⭐ Description: Creates a dynamic design template directly from a data table, applying custom colors, sizes, and positioning defined in the dataset.
///    Warning: DataCategory must be "ImageUrl" for proper rendering in Power BI visuals
///    Notes: Panoramasoft.UI.WindowCanvas(canvasHeight, canvasWidth, layoutDefinition, showInfo)
/// 
/// 📖 Examples:
/// Panoramasoft.UI.WindowCanvas(800, 1200, layoutDefinition, FALSE()) → Renders the layout based on the layoutDefinition configuration.
/// Panoramasoft.UI.WindowCanvas(800, 1200, layoutDefinition, TRUE())  → Renders the layout with visible size and position attributes.
///
/// 📊 Required Table Columns:
/// - Height: Number (rectangle height in pixels)
/// - Width: Number (rectangle width in pixels)
/// - Horizontal: Number (X position from left edge)
/// - Vertical: Number (Y position from top edge)
/// - CornerRadius: Number (rounded corner radius, 0 = sharp corners)
/// - FillColor: Text (hex color like #3498db or CSS color name)
/// - ShowInfo: Boolean (display size and position info)
///
/// 📤 Returns: Text string (SVG data URI compatible with Power BI Image URL)
FUNCTION Panoramasoft.UI.WindowCanvas =
		(
            canvasHeight: INT64 VAL,
			canvasWidth: INT64 VAL,
            windowTable: TABLE,
            showInfo: BOOLEAN VAL
        ) =>
	
		
		// ═══════════════════════════════════════════════════════════════
		// STEP 1: Transform Input Table - Add SVG Generation Column
		// ═══════════════════════════════════════════════════════════════
		// For each row in windowTable, generate the corresponding SVG code
		// This creates a new column "svgPart" containing the complete SVG 
		// markup for each rectangle (and optionally its label)    
	    VAR _windows =
	        ADDCOLUMNS (
	            windowTable,
	            "svgPart",
	                "<rect x='" & [Horizontal] & 
	                "' y='" & [Vertical] & 
	                "' width='" & [Width] & 
	                "' height='" & [Height] & 
	                "' rx='" & [CornerRadius] & 
	                "' ry='" & [CornerRadius] & 
	                "' fill='" & [FillColor] & "'/>" &
					
					// Conditional: Add dimension/position label if requested
	                IF(  
	                    showInfo,  
	                    "<text x='" & ([Horizontal] + [Width] / 2) & 
	                    "' y='" & ([Vertical] + [Height] / 2) & 
	                    "' text-anchor='middle' dominant-baseline='middle' " &
	                    "font-size='12' fill='black' font-family='Arial'>" &
	                    "W:" & [Width] & " H:" & [Height] & " X:" & [Horizontal] & " Y:" & [Vertical] &
	                    "</text>",
	                    ""
	                )
	        )
    
	
		// ═══════════════════════════════════════════════════════════════
	    // STEP 2: Concatenate All SVG Parts Into Single String
	    // ═══════════════════════════════════════════════════════════════
	    // Combines all individual rectangle SVG codes into one continuous string
	    // This creates the content that will go inside the main <svg> container
	    VAR _allWindows = CONCATENATEX ( _windows, [svgPart], "" )
	    
    
		// ═══════════════════════════════════════════════════════════════
		// STEP 3: Build Complete SVG Document with Data URI Wrapper
		// ═══════════════════════════════════════════════════════════════
		// Wraps all rectangles in a complete SVG structure and encodes it
		// as a data URI for Power BI compatibility
		VAR _svgTemplate =
	        "data:image/svg+xml;utf8," &
	        "<svg width='" & canvasWidth &
	        "' height='" & canvasHeight &
	        "' xmlns='http://www.w3.org/2000/svg'>" &
	            _allWindows &
	        "</svg>"
	    
	    RETURN _svgTemplate

	annotation DAXLIB_PackageId = Panoramasoft.UI
	annotation DAXLIB_PackageVersion = 1.0.0
