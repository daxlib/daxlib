/// This function returns the difference between two values. Using a macro it will automatically create the measure with the correct naming, display folder and table. https://github.com/bernatagulloesbrina/TabularEditor-Scripts/blob/main/Advanced/DaxUDF%20Macros/create%20measures%20from%20daxudfs.csx
function 'EveryDay.KpiCalcs.Difference.Abs' =
		(
			mainValueMeasure,
			referenceValueMeasure
		) =>
		IF(
			ISBLANK( mainValueMeasure )
				|| ISBLANK(
					referenceValueMeasure
				),
			BLANK( ),
			mainValueMeasure
				- referenceValueMeasure
		)

	annotation outputType = Measure
	annotation nameTemplate = mainValueMeasureName vs referenceValueMeasureName
	annotation formatString = +mainValueMeasureFormatStringRoot;-mainValueMeasureFormatStringRoot;-
	annotation displayFolder = mainValueMeasureDisplayFolder\mainValueMeasureName Difference
	annotation outputDestination = mainValueMeasureTable
	annotation DAXLIB_PackageId = EveryDay.KpiCalcs
	annotation DAXLIB_PackageVersion = 0.1.2-beta

/// This function returns "good" if the main value is greater or equal than the reference value, otherwise it returns "bad". Using a macro it will automatically create the measure with the correct naming, display folder and table.	
function 'EveryDay.KpiCalcs.Difference.CF' =
				(
					mainValueMeasure,
					referenceValueMeasure
				) =>
				IF(
					ISBLANK( mainValueMeasure )
						|| ISBLANK( referenceValueMeasure ),
					BLANK( ),
					IF(
						mainValueMeasure >= referenceValueMeasure,
						"good",
						"bad"
					)
				)

	annotation outputType = Measure
	annotation nameTemplate = mainValueMeasureName vs referenceValueMeasureName CF
	annotation formatString = @
	annotation displayFolder = mainValueMeasureDisplayFolder\mainValueMeasureName Difference
	annotation outputDestination = mainValueMeasureTable
	annotation DAXLIB_PackageVersion = 0.1.2-beta
	annotation DAXLIB_PackageId = EveryDay.KpiCalcs

/// This function returns the percentual difference between two values. Using a macro it will automatically create the measure with the correct naming, display folder and table. https://github.com/bernatagulloesbrina/TabularEditor-Scripts/blob/main/Advanced/DaxUDF%20Macros/create%20measures%20from%20daxudfs.csx
function 'EveryDay.KpiCalcs.Difference.Pct' =
		(
			mainValueMeasure,
			referenceValueMeasure
		) =>
		IF(
			ISBLANK( mainValueMeasure )
				|| ISBLANK( referenceValueMeasure ),
			BLANK( ),
			DIVIDE(
				mainValueMeasure
					- referenceValueMeasure,
				referenceValueMeasure
			)
		)

	annotation outputType = Measure
	annotation nameTemplate = mainValueMeasureName vs referenceValueMeasureName %
	annotation formatString = +0.0%;-0.0%;-
	annotation displayFolder = mainValueMeasureDisplayFolder\mainValueMeasureName Difference
	annotation outputDestination = mainValueMeasureTable
	annotation DAXLIB_PackageVersion = 0.1.2-beta
	annotation DAXLIB_PackageId = EveryDay.KpiCalcs

/// This function returns the ratio between two values. Using a macro it will automatically create the measure with the correct naming, display folder and table.
function 'EveryDay.KpiCalcs.Difference.Pct100' =
		(
			mainValueMeasure,
			referenceValueMeasure
		) =>
		IF(
			ISBLANK( mainValueMeasure )
				|| ISBLANK( referenceValueMeasure ),
			BLANK( ),
			DIVIDE(
				mainValueMeasure,
				referenceValueMeasure
			)
		)

	annotation outputType = Measure
	annotation nameTemplate = mainValueMeasureName vs referenceValueMeasureName 100%
	annotation formatString = 0.0%;-0.0%;-
	annotation displayFolder = mainValueMeasureDisplayFolder\mainValueMeasureName Difference
	annotation outputDestination = mainValueMeasureTable
	annotation DAXLIB_PackageVersion = 0.1.2-beta
	annotation DAXLIB_PackageId = EveryDay.KpiCalcs

